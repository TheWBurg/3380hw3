team 03 members
dbs033
dbs007

Installations
This teamâ€™s web application used the following installations:
run the following commands in the console
-npm install node
-npm install node-fetch
-npm install cors
-npm install express

Run "node index.js" before launching index.html (This starts the server)

PLEASE KEEP THE SAME FILE STRUCTURE THAT WE HAVE GIVEN YOU. We know that it is counter intuitive to have some files in a 
test folder, and only some in a frontend folder. We would have changed this if we had time, but with only 2 members we just  
ran out of time. This structure is strange, but the project works.                   

exampleSQL.sql is a file with some of our queries that you can run. However, in our project our queries are embedded in javasc$
This means that many of these queries will only work 1 time if running them seperately from the javascript.
If you would like to really see our queries in action, please run them from our website. This is
how they were meant to be used.  Otherwise run the sql file
"Fully_reset_database.sql" which can be found in a directory above this one. This will remove the data entered from the
exampleSQL.sql, and then allow you rerun the exampleSQL.sql file.

ALSO NOTE: For searching flights and connected flights, the following cities are in are database by default:
-New York
-Los Angeles
-Houston
-Austin
-Dallas
-Denver
You can use these to see our code in action.

sources used
TA example program
https://github.com/tian1001tx/cosc3380
string comparison in javascript
https://pretagteam.com/question/check-if-string-contains-only-letters-in-javascript

Changed SSN to User-Name on the front end. SSN in the database signifies User name for all intents and purposes.

functional dependencies:
BCNF violations
airport table
-airport_name->airport_code

aircraft table
full_name->model

waitlist table
position->waitlist_id

Removing these BCNF violations would have been counterproductive. 
In the case of airport_name->airport_code and full_name->model, these
dependencies merely add information that makes the database easier to use.
The dependency between position and waitlist_id keeps the database from having
to update every position when someone is taken off the waitlist.

query.sql and transaction.sql files write all queries that are sent to the 
database. If the files are deleted they are created again by the program when
the next query is written.

WHAT EACH TEAM MEMBER DID:
Paul Edson:
-Initial database set up
-Worked on initial and final ER diagram
-Initial program structure, needed packages etc
-implimenting connected flights
-html tables
-check status of tickets, implimenting front end and extending back end
-Worked on PDF
-Demo video
-general error checking
-worked on front end logic to register user

William Berquist
-worked on initial and final ER design
-schema implimentation
-Transaction to Buy tickets
-Front end logic to buy tickets
-Transaction to register User
-worked on front end logic to register user
-Transaction and front end logic to cancel ticket table
-Transaction and front end logic for updating waitlist table
-Query for finding single flights
-initial ticket info query
-waitlist position query
-PDF
-DEMO
